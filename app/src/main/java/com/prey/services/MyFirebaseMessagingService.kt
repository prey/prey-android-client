/*******************************************************************************
 * Created by Orlando Aliaga
 * Copyright 2025 Prey Inc. All rights reserved.
 * License: GPLv3
 * Full license at "/LICENSE"
 ******************************************************************************/
package com.prey.services

import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage
import com.prey.PreyConfig
import com.prey.beta.actions.PreyBetaController
import com.prey.PreyLogger

/**
 * Firebase Messaging Service responsible for handling incoming messages and token refreshes.
 */
class MyFirebaseMessagingService : FirebaseMessagingService() {

    /**
     * Called when a message is received from Firebase Cloud Messaging.
     *
     * @param remoteMessage the incoming message from Firebase Cloud Messaging
     */
    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        PreyLogger.d("FIREBASE onMessageReceived")
        if (remoteMessage.data.isNotEmpty()) {
            val text = remoteMessage.data.toString()
            PreyLogger.d("FIREBASE data:$text")
            var cmd: String? = null
            cmd = try {
                remoteMessage.data["cmd"]
            } catch (e: Exception) {
                null
            }
            PreyLogger.d("FIREBASE cmd:$cmd")
            PreyBetaController.getInstance().startPrey(applicationContext, cmd)
        }
    }

    /**
     * Called when a new token is generated by Firebase Cloud Messaging.
     *
     * @param token the new token generated by Firebase Cloud Messaging
     */
    override fun onNewToken(token: String) {
        PreyLogger.d("FIREBASE Refreshed token: $token")
        // If you want to send messages to this application instance or
        // manage this apps subscriptions on the server side, send the
        // FCM registration token to your app server.
        PreyLogger.d("FIREBASE sendRegistrationTokenToServer($token)")
        PreyConfig.getInstance(applicationContext).sendToken(applicationContext,token!!)
    }

}